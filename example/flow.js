const {Dispatcher, Store, Actions} = require('..')

// define actions
class SampleActions extends Actions {
  // string for actionType is generated by `Actions` from method name `click`
  // therefor `type` needs to be named using the correct method name,
  // in this case `this.actionTypes.click`
  click (data) {
    this.dispatch({type: this.actionTypes.click, data})
  }
}

// define a store
class SampleStore extends Store {
  constructor (dispatcher, opts) {
    super(dispatcher, opts)
    this.store = {}
  }
  __dispatch (action) {
    const {actionTypes} = this.opts
    switch (action.type) {
      case actionTypes.click:
        Object.assign(this.store, action.data)
        this.__emitChange()
        break
    }
  }
}

// define a "react" component - just pseudo code here... 
class Component {
  constructor (props) {
    this.props = props
    this.onChange = this.onChange.bind(this)
  }
  componentDidMount () {
    this.removers = [ // connect to store
      this.props.store.addListener(this.onChange)
    ]
  }
  componentWillUnmount () { // disconnect from store(s)
    this.removers.forEach((store) => store.remove())
  }
  onChange () {
    console.log(this.props.store.store)
    // do `this.setState(...)` here
  }
  onClick () {
    this.props.actions.click({x: 5, y: 10})
  }
}

// our instances
const dispatcher = new Dispatcher()
const actions = new SampleActions(dispatcher.dispatch)
const store = new SampleStore(dispatcher, {actionTypes: actions.actionTypes})
const c = new Component({store, actions})
c.componentDidMount()
// dispatch an action
c.onClick()
//> {x: 5, y: 10}
