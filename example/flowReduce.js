const {Dispatcher, ReduceStore, Actions} = require('..')

// define actions
class SampleActions extends Actions {
  click (data) {
    console.time('click')
    // string for type is generated by `Actions` from method name `click`
    // therefor `type` needs to be named using the correct method name,
    // in this case `this.click.type`
    const type = this.click.type
    this.dispatch({type, data})
  }
}

// define a store
class SampleStore extends ReduceStore {
  reduce (state, action) {
    const {actions} = this.opts
    let nextState = state
    switch (action.type) {
      case actions.click.type:
        nextState = action.data
        break
    }
    return nextState
  }
}

// define a "react" component - just pseudo code here...
class Component {
  constructor (props) {
    Object.assign(this, {
      state: {},
      store: props.store,
      actions: props.actions,
      onChange: this.onChange.bind(this)
    })
  }
  setState (state) {
    Object.assign(this.state, state)
    this.render()
  }
  componentDidMount () {
    this.removers = [ // connect to store
      this.store.addListener(this.onChange)
    ]
  }
  componentWillUnmount () { // disconnect from store(s)
    this.removers.forEach((store) => store.remove())
  }
  onChange () {
    this.setState(this.store.getState())
  }
  onClick () {
    this.actions.click({x: 5, y: 10})
  }
  render () {
    console.log(this.state)
    console.timeEnd('click')
  }
}

// our instances
const dispatcher = new Dispatcher()
const actions = new SampleActions(dispatcher.dispatch)
const store = new SampleStore(dispatcher, {actions})
const c = new Component({store, actions})
c.componentDidMount()

// dispatch an action
c.onClick()
// > {x: 5, y: 10}
